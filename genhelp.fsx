open System
open System.Text.RegularExpressions

type Topic = string
type Topics = Map<Topic, string>
type Templates = Map<Topic, string list>

/// All lines entered on the console until EOF.
let lines = seq {
    let mutable loop = true
    while loop do
    match Console.ReadLine() with
    | null ->
        loop <- false
    | line ->
        yield line
}

/// Match header lines (title word followed by hyphens).
let (|Header|_|) : string -> Topic option =
    let re = Regex @"^\w+-+$"
    fun str ->
        let m = re.Match str
        if m.Success then
            Some <| str.TrimEnd '-'
        else
            None

/// Collect help topics from a list of strings.
///
/// A topic starts with a header line and continues to the next or EOF.
let rec gather : inputLines:string list -> Templates =
    let rec gather total part title = function
        | [] ->
            let rev = List.rev part
            total |> Map.add title rev
        | Header newTitle :: rest ->
            let rev = List.rev part
            gather (total |> Map.add title rev) [] newTitle rest
        | line :: rest ->
            gather total (line :: part) title rest
    gather Map.empty [] ""

let templates =
    lines
    |> Seq.toList
    |> gather

let nl = Environment.NewLine
let join = String.concat nl

/// Topics might cross-reference each other, that needs to be resolved.
/// Also join lines with newlines.
let stamped : Topics =
    templates
    |> Map.map (fun _ v ->
        let replaced =
            v
            |> List.map (fun line ->
                if line.StartsWith "%" && line.EndsWith "%" then
                    let lookup = line.Trim '%'
                    templates.[lookup] |> join
                else
                    line
            )
        join replaced
    )

/// Three quotes for raw strings.
let three = String.replicate 3 "\""

/// Four spaces for indentation.
let four = String.replicate 4 " "

printfn """// Generated by script %s, do not edit manually!

[<RequireQualifiedAccess>]
module Help

open System.Diagnostics
open System.IO

let general = %s
%s%s
""" fsi.CommandLineArgs.[0] three stamped.[""] three

printfn "let specific =%s%s[" nl four
for kv in stamped do
    if kv.Key = "tool" then
        printfn """%s"%s", %s%s%s.Replace("#tool#", Process.GetCurrentProcess().MainModule.FileName |> Path.GetFileName)""" four kv.Key three kv.Value three
    elif kv.Key <> "" then
        printfn """%s"%s", %s%s%s""" four kv.Key three kv.Value three
printfn "%s] |> Map.ofList" four
