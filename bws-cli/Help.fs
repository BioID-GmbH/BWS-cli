// Generated by script genhelp.fsx, do not edit manually!

[<RequireQualifiedAccess>]
module Help

open System.Diagnostics
open System.IO

let general = """
Available commands (type "help <command>" learn more):

Stateless querying:
   status              Give status info about the BioID web service.
   isenrolled          Check whether a BCID with a trait is known.
   result              Get previous results (even from somewhere else).

Authorization and data handling:
   token               Get a token for a command in the next section.
   upload              Upload images for a command in the next section.
   deleteclass         Remove a class with all images from the storage.

Biometric operations:
   enroll              Add a new class or images to an existing class.
   verify              Check whether images belong to a given class.
   identify            Compare one class to all others and list the best.
   livenessdetection   Check if multiple images show a live person or not.

Special purpose token-less calls:
   livedetection       Perform a live check with two images.
   photoverify         See whether a passport images matches two live ones.
   qualitycheck        Assay the quality of an images wrt. ICAO standards.

Tool specific:
   set                 Set a variable that is passed with every call.
   unset               Unset one or all variables.
   pause               Pause for some given milliseconds (default: 500).
   documentation       Launch a browser with the official documentation.
   exit                Quit interactive mode.

You can also try help on these general topics: <workflow>, <authorization>,
<bcid>, <tool>, <shortcuts> and <examples>."""

let specific =
    [
    "authorization", """There are two ways to be authorized for BWS API calls:
1. Basic HTTP Authentication Scheme (RFC 7617)
2. JSON Web Tokens (RFC 7519)

The second method is used for the four core biometric operations: <enroll>,
<verify>, <identify> and <livenessdetection> (plus <upload>). To use these you
first need to get a JWT via the <token> call. Other stateless calls use the
first method.

For both ways, you need to be registered and have been provided with an
endpoint, an application ID and an application password. These can be passed as
<tool> arguments and the rest is done automatically."""
    "bcid", """A BCID, or Biometric Class ID, is an identifier for the BWS. It consists of
three parts separated by a dot or a forward slash.

A single BCID must correspond to one and only one person. Never enroll different
people with the same BCID or use the same BCID for different people! Doing so
will severely degrade recognition.

We care about data privacy, so we don't want to know anything about your users.
You manage your users data with an associated BCID. And when you want to make a
biometric call, you provide the BCID and one ore more samples. We then tell you
the result of that biometric operation which you will handle in your system.

The first part of a BCID is the storage. This is a string that directly maps to
the Azure data center location where the template for this class is stored.

The second part is a partition. Typically you're assigned a partition and will
always use that number. Advanced use cases might need several partitions per
storage to its users in different groups. Note that an <identify> call only ever
looks at one specific partition.

The last part is again a number. There is no pattern is these numbers, just make
them up randomly as you enroll. But do take care to respect the one-to-one
mapping.

Example: bws.123.456
This identifies a class 456 within partition 123 of storage bws."""
    "deleteclass", """Deletes all data associated with a BCID, which is the only mandatory parameter."""
    "documentation", """Starts a browser to the official developer documentation for a given command.

Example call: documentation enroll"""
    "enroll", """Make a user (better) known to the system. Uploaded images are either used to
create a new class (new BCID) or improve an existing class.

Example call: enroll livedetection+

Optional parameters:
livedetection{+|-}   Enable or disable live detection (2+ images needed).

                        Attention: Disabling will have no effect if it was
                        enabled for the token!
"""
    "examples", """token 123 enroll
enroll enroll?.png
pause
token 123 v livedetection-
verify ver*.jpg

This enrolls all PNG files matching the pattern to a BCID ending in 123. After
giving the BWS a little time to think, a verification is done with different
images where we don't care whether they depict a live person or not."""
    "exit", """Exit interactive mode and return to the command line.

An exit code of 0 indicates that everything went well and a possible live
detection or verification succeeded. An error code of 1 means there were no
errors, but a result was negative, e.g. a failed verification. Larger exit codes
mean errors in usage or from the BWS."""
    "help", """I'm helping already, am I not?"""
    "identify", """Identify which classes the uploaded images most likely belong to. The result is
a list of classes with decreasing confidence.

Example call: identify maxresults=3

Optional parameters:
livedetection{+|-}   Enable or disable live detection (2+ images needed).

                        Attention: Disabling will have no effect if it was
                        enabled for the token!

   maxresults[=20]      The maximum number of matches to return."""
    "isenrolled", """Find out whether a BCID is enrolled with a specific trait. Both parameters are
required.

Example call: isenrolled bws.123.456 face"""
    "livedetection", """Perform a live detection on exactly two images. No token is needed for this.

Example call: livedetection one.png two.png"""
    "livenessdetection", """Perform a live detection on all uploaded images. In contrast to <livedetection>
this works with challenge response and therefore needs a token.

Usage: livenessdetection"""
    "pause", """Waits for a couple of milliseconds. This can be useful to ensure that the BWS
has finished enrolling previously uploaded images before a verification or
similar is started.

If you don't give a number, 500 milliseconds is the default.

Example call: pause 200"""
    "photoverify", """Tries to find out if two live images match a picture that may come from an
identity document (e.g. passport).

The passport images needs to be the first parameter, two more provide the live
images.

Example call: photoverify passport.png live1.png live2.png

Optional parameters:
   accuracy=4           A confidence/strictness level from 1 to 5 (default: 4).
                        1 is not much better than guessing, not recommended!
                        5 is very strict and needs very good image quality."""
    "plivedetection", """livedetection{+|-}   Enable or disable live detection (2+ images needed).

                        Attention: Disabling will have no effect if it was
                        enabled for the token!
"""
    "qualitycheck", """Checks the quality of an image wrt. biometric compatibility.

Example call: qualitycheck issuer=BioID

Optional parameters:
   full{+|-}            If true (default) work in full document mode, otherwise
                        token mode is used.

                        In document mode, more checks are being done.

   issuer=ICAO          The issuer of the quality check rules.

                        Probably you want to use "ICAO" (International Civil
                        Aviation Organization). Alternatively there is also
                        "BioID" for a bigger output image."""
    "result", """Fetch the result of a previous biometric operation. Typically this is necessary
if the token has been passed to another application to perform the biometric
operation and one now wants to get the outcome.

If you don't provide a token string, the last from the history is used.

Usage: result"""
    "set", """Remember a setting that is passed with all API calls. This is remembered until
the end of the session or until you clear it with <unset>.

For instance, one might want to try things without live detection. Instead of
always passing it explicitly, one can set it once and it is always passed. Calls
that don't understand a parameter silently ignore it.

Example call: set livedetection=false bcid=bws.123.456

Settings are given one or more key=value strings. Don't put spaces around the
equal sign, it will confuse the parser!

Boolean settings can be specified using a trailing + or - for setting them to
true or false.

If you call set without arguments, the current list of settings is printed."""
    "shortcuts", """All basic commands can be abbreviated as long as the abbreviation is not
ambiguous.

Examples: is->isenrolled, id->identify, q->qualitycheck

Whenever a <BCID> shall be provided, you can just use a single number. Because
the tool is given a storage and a partition, it will assemble a valid BCID
automatically.

Example: isenrolled 456 face -> isenrolled bws.123.456 face

For the <token> command the task can be given abbreviated.

Example: token 456 e -> token bws.123.456 task=enroll

After getting a token, normally one would issue <upload> commands which are then
followed by a biometric command. You can leave out upload and just give the file
names to the biometric command and the rest is handled automatically.

Example: verify a.png b.png
      -> upload a.png
         upload b.png
         verify

All commands that take a file accept multiple files in one call as well as glob
patterns using ? and *.

Example call: enroll face*.png eye?.png

All boolean parameters need not be given like setting=true. The shorthand
setting+ or setting- is understood.

Example call: enroll livedetection+"""
    "status", """Not much to say, just prints status information. If you want to see more, start
with --verbose option.

Usage: status"""
    "token", """Get a token for a biometric operation for a mandatory BCID. Images uploaded
after this call but before the biometric call are considered to belong together.

Example call: token bws.123.456 task=enroll

Optional parameters:
livedetection{+|-}   Enable or disable live detection (2+ images needed).

                        Attention: Disabling will have no effect if it was
                        enabled for the token!

   task=verify          Which task shall the token be for? Possible choices are
                        verify, enroll, identify and livenessdetection.

   maxtries=3           How many retries are possible (max 15).

   challenge{+|-}       Whether challenge response shall be enabled.

                        Attention: Disabling here cannot override an enable in
                        the users personal settings!

   challenges=3         How many challeges shall be required (2 to 7).

   autoenroll{+|-}      If set to true (default: false) verification images are
                        also used for enrollment to keep the template up to
                        date. This of course only happens for successful
                        verifications.

   traits=face,periocular Which traits shall be used?"""
    "tool", """Usage: #tool# [options] [command]

Options:
   -h, --help             show this help message and exit
   -v, --verbose          be more verbose, even more with -vv
   -q, --quiet            reduce outut to a minimum
   -e, --endpoint <url>   the endpoint to connect to
   -s, --storage <loc>    give the storage to use
   -p, --partition <num>  give the partition to use
   -a, --app <id>         the application id for authorization
   -p, --password <pw>    the application passport for authorization
   -i, --interactive      drop into interactive mode after executing command
   -b, --print-body       print all JSON results
   -c, --clean-up         delete all classes created during the session at exit
   -o, --output <file>    filename for the result of a quality check""".Replace("#tool#", Process.GetCurrentProcess().MainModule.FileName |> Path.GetFileName)
    "unset", """Use this to forget settings made with <set>. Either give a list of keys to
remove specific ones or no arguments to clear the settings table.

Example call: unset livedetection"""
    "upload", """Upload files to the BWS for a biometric operation to come. Provide one or more
file paths.

Example call: upload left.png tag=left index=0

Optional parameters:
   tag                  Attach some info/description to the uploaded file. This
                        can e.g. be used with challenge response to say which
                        movement an image was meant for (i.e. left, right, up,
                        down).

   index                An index for a sequence of images. This can be necessary
                        because images might not arrive in the order they were
                        sent. This can then mess up challenge response.

   trait                Which trait shall be used?"""
    "verify", """Check whether a user claims who he is to be, i.e. this is a one-to-one
comparison against a stored template.

Example call: verify livedetection-

Optional parameters:
livedetection{+|-}   Enable or disable live detection (2+ images needed).

                        Attention: Disabling will have no effect if it was
                        enabled for the token!
"""
    "workflow", """Apart from the special token-less calls the typical workflow is as follows:
1. You start by making users known by enrolling them. Each user gets its own
   <BCID> that you provide and manage.
2. Once a BCID is known (check with <isenrolled>) it can be used. One can check
   whether a user is who he claims to be with a <verify> call. To see who a
   person (most probably) is, you'd use identify. And if you just want to make
   shure that you're not fed fake images, <livenessdetection> is there to help.

Livenessdetection is a first step to defeat people trying to hack the system,
but if you want more confidence, use challenge response. Here, the user is
prompted to follow random head movements.

In addition to authentication, a token serves as a mechanism to associate
samples to a BCID.

When you get a token, you need to specify a BCID. Successive <upload> calls then
use that token so that the BWS knows what class they belong to. These steps are
completed with a biometric call which consumes the token. For new calls you need
to get a fresh token."""
    ] |> Map.ofList
